---
import Section from "./partials/Section.astro";
import SectionTitle from "./partials/SectionTitle.astro";
import background from "../../assets/background.svg";
import config from "@/lib/config";
import Quote from "./partials/Quote.astro";
import CTAButtons from "./partials/CTAButtons.astro";
const roles = config.pages.index.sections.introduction.roles;
---

<Section id={config.pages.index.sections.introduction.id}>
  <SectionTitle title={config.pages.index.sections.introduction.title} />
  <!-- Name, Title start -->
  <div
    class="py-10 sm:py-16 md:py-20 flex flex-col items-center text-center relative z-1"
  >
    <!-- Background start -->
    <div class="absolute inset-0 -z-1 pointer-events-none select-none">
      <img
        id="background"
        src={background.src}
        alt=""
        fetchpriority="high"
        class="w-full h-full object-contain blur-[48px]"
      />
    </div>
    <!-- Background end -->
    <p class="font-hand text-3xl sm:text-4xl md:text-5xl">
      {config.pages.index.sections.introduction.first}
    </p>
    <!-- Name start -->
    <a href={config.pages.index.ctaLinks.linkedIn} target="_blank">
      <p
        class="font-display text-5xl sm:text-6xl md:text-7xl lg:text-8xl font-extrabold mt-2.5 text-accent-foreground"
      >
        {config.pages.index.sections.introduction.name}
      </p>
    </a>
    <!-- Name end -->
    <div
      id="role-container"
      class="relative flex items-center justify-center py-2 px-6 mt-6 md:mt-8"
    >
      <!-- Focus lines start -->
      <div
        class="top-left absolute top-0 left-0 h-3 w-3 border-t-3 border-l-3 border-foreground"
      >
      </div>
      <div
        class="top-right absolute top-0 right-0 h-3 w-3 border-t-3 border-r-3 border-foreground"
      >
      </div>
      <div
        class="bottom-left absolute bottom-0 left-0 h-3 w-3 border-b-3 border-l-3 border-foreground"
      >
      </div>
      <div
        class="bottom-right absolute bottom-0 right-0 h-3 w-3 border-b-3 border-r-3 border-foreground"
      >
      </div>
      <!-- Focus lines end -->
      <p
        id="role"
        class="font-ibm text-xl sm:text-2xl md:text-3xl lg:text-[2rem]"
      >
        {roles[0]}
      </p>
    </div>
    <div class="mt-12">
      <CTAButtons hasResume />
    </div>
  </div>
  <!-- Name, Title end -->
  <!-- Paragraphs start -->
  <div
    id="introduction__paragraphs"
    class="mt-5 mb-10 leading-relaxed text-[1.125rem] md:text-xl space-y-6"
  >
    {
      config.pages.index.sections.introduction.paragraphs.map((paragraph) => (
        <p set:html={paragraph} />
      ))
    }
  </div>
  <!-- Paragraphs end -->
  <Quote quote={config.pages.index.sections.introduction.quote} />
</Section>

<script>
  import config from "@/lib/config";
  import gsap from "gsap";
  import { Flip } from "gsap/Flip";

  gsap.registerPlugin(Flip);

  const roles = config.pages.index.sections.introduction.roles;
  const roleEl = document.getElementById("role");
  const roleContainerEl = document.getElementById("role-container");
  let prevState = Flip.getState(roleContainerEl);

  let index = 0;

  function animateRole() {
    gsap.to(roleEl, {
      opacity: 0,
      y: -20,
      duration: 0.5,
      onComplete: () => {
        index = (index + 1) % roles.length;
        roleEl.textContent = roles[index];
        gsap.fromTo(
          roleEl,
          { opacity: 0, y: 20 },
          { opacity: 1, y: 0, duration: 0.25, delay: 0.25 }
        );
        Flip.from(prevState, {
          duration: 0.1,
          ease: "power1.inOut",
          onComplete: () => {
            prevState = Flip.getState(roleContainerEl);
          },
        });
      },
    });
  }

  // Start cycling every 4s
  let interval = setInterval(animateRole, 4000);

  document.addEventListener("visibilitychange", () => {
    if (document.visibilityState === "visible") {
      prevState = Flip.getState(roleContainerEl);
      interval = setInterval(animateRole, 4000);
    } else {
      clearInterval(interval);
    }
  });
</script>

<script>
  import gsap from "gsap";
  import SplitType from "split-type";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  // Split text into words/chars
  let typeSplit = new SplitType("#introduction__paragraphs", {
    types: "words",
    tagName: "span",
  });

  ScrollTrigger.refresh();

  gsap.from("#introduction__paragraphs .word", {
    opacity: 0.3,
    ease: "power1.in",
    stagger: 0.1,

    scrollTrigger: {
      trigger: "#introduction__paragraphs",
      start: "top bottom",
      end: "bottom 80%",
      scrub: true,
    },
  });
</script>
